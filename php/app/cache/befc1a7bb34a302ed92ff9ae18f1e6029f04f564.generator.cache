<?php

use Symfony\Component\Routing\RequestContext;
use Symfony\Component\Routing\Exception\RouteNotFoundException;
use Psr\Log\LoggerInterface;

/**
 * UrlGeneratorbefc1a7bb34a302ed92ff9ae18f1e6029f04f564
 *
 * This class has been auto-generated
 * by the Symfony Routing Component.
 */
class UrlGeneratorbefc1a7bb34a302ed92ff9ae18f1e6029f04f564 extends Pagekit\Component\Routing\Generator\UrlGenerator
{
    private static $declaredRoutes = array(
        '@installer/installer' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Pagekit\\Installer\\Controller\\InstallerController::indexAction',    '_response' =>     array (      'value' => 'extension://installer/views/install.razr',    ),  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/installer',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '@installer/installer/check' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Pagekit\\Installer\\Controller\\InstallerController::checkAction',    '_request' =>     array (      'value' =>       array (        'config' => 'array',      ),    ),    '_response' =>     array (      'value' => 'json',    ),  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/installer/check',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '@installer/installer/install' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'Pagekit\\Installer\\Controller\\InstallerController::installAction',    '_request' =>     array (      'value' =>       array (        'config' => 'array',        'option' => 'array',        'user' => 'array',      ),    ),    '_response' =>     array (      'value' => 'json',    ),  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/installer/install',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
    );

    /**
     * Constructor.
     */
    public function __construct(RequestContext $context, LoggerInterface $logger = null)
    {
        $this->context = $context;
        $this->logger = $logger;
    }

    public function generate($name, $parameters = array(), $referenceType = self::ABSOLUTE_PATH)
    {
        if (!isset(self::$declaredRoutes[$name])) {
            throw new RouteNotFoundException(sprintf('Unable to generate a URL for the named route "%s" as such route does not exist.', $name));
        }

        list($variables, $defaults, $requirements, $tokens, $hostTokens, $requiredSchemes) = self::$declaredRoutes[$name];

        return $this->doGenerate($variables, $defaults, $requirements, $tokens, $parameters, $name, $referenceType, $hostTokens, $requiredSchemes);
    }

    protected function getRouteProperties($name)
    {
        if (isset(self::$declaredRoutes[$name])) {
            return self::$declaredRoutes[$name];
        }
    }
}
